# Generated by Django 3.2.5 on 2022-06-25 12:34

import check.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(blank=True, max_length=30, verbose_name='username')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('phone', models.CharField(blank=True, max_length=16, verbose_name='phone')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', check.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avg', models.IntegerField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Construct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('construct_name', models.CharField(max_length=100)),
                ('construct_slug', models.CharField(max_length=100, null=True)),
                ('construct_desc', models.CharField(max_length=100, null=True)),
                ('result_statement_lowest', models.CharField(max_length=500, null=True)),
                ('result_statement_lower', models.CharField(max_length=500, null=True)),
                ('result_statement_moderate', models.CharField(max_length=500, null=True)),
                ('result_statement_higher', models.CharField(max_length=500, null=True)),
                ('result_statement_highest', models.CharField(max_length=500, null=True)),
                ('criteria_point', models.IntegerField(null=True)),
                ('avg', models.IntegerField(null=True)),
                ('count', models.IntegerField(null=True)),
                ('main_flag', models.BooleanField(default=False, help_text='This fiels show that this construct is main or not. ', verbose_name='construct importance')),
                ('emotion_flag', models.BooleanField(default=False, help_text='This fiels show that this construct is about emotion. ', verbose_name='construct of emotion')),
                ('personality_flag', models.BooleanField(default=False, help_text='This fiels show that this construct is about personality. ', verbose_name='construct of personality')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='StressQOL',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.CharField(max_length=400)),
                ('question_order', models.IntegerField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('construct_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='check.construct')),
            ],
        ),
        migrations.CreateModel(
            name='AnswerDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_value', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='check.answer')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='check.question')),
            ],
        ),
        migrations.AddField(
            model_name='answer',
            name='construct',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='check.construct'),
        ),
        migrations.AddField(
            model_name='answer',
            name='stress_qol',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='check.stressqol'),
        ),
        migrations.AddField(
            model_name='answer',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
